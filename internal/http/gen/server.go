// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.1 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /amazon)
	AddAmazon(ctx echo.Context) error

	// (PATCH /amazon/active/{asin})
	UndeleteAmazon(ctx echo.Context, asin string) error

	// (DELETE /amazon/{asin})
	DeleteAmazon(ctx echo.Context, asin string) error

	// (GET /amazon/{asin})
	FindAmazonById(ctx echo.Context, asin string) error

	// (PATCH /amazon/{asin})
	PatchAmazon(ctx echo.Context, asin string) error

	// (PUT /amazon/{asin})
	UpdateAmazon(ctx echo.Context, asin string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AddAmazon converts echo context to params.
func (w *ServerInterfaceWrapper) AddAmazon(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddAmazon(ctx)
	return err
}

// UndeleteAmazon converts echo context to params.
func (w *ServerInterfaceWrapper) UndeleteAmazon(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asin" -------------
	var asin string

	err = runtime.BindStyledParameterWithLocation("simple", false, "asin", runtime.ParamLocationPath, ctx.Param("asin"), &asin)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asin: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UndeleteAmazon(ctx, asin)
	return err
}

// DeleteAmazon converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteAmazon(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asin" -------------
	var asin string

	err = runtime.BindStyledParameterWithLocation("simple", false, "asin", runtime.ParamLocationPath, ctx.Param("asin"), &asin)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asin: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteAmazon(ctx, asin)
	return err
}

// FindAmazonById converts echo context to params.
func (w *ServerInterfaceWrapper) FindAmazonById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asin" -------------
	var asin string

	err = runtime.BindStyledParameterWithLocation("simple", false, "asin", runtime.ParamLocationPath, ctx.Param("asin"), &asin)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asin: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindAmazonById(ctx, asin)
	return err
}

// PatchAmazon converts echo context to params.
func (w *ServerInterfaceWrapper) PatchAmazon(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asin" -------------
	var asin string

	err = runtime.BindStyledParameterWithLocation("simple", false, "asin", runtime.ParamLocationPath, ctx.Param("asin"), &asin)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asin: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchAmazon(ctx, asin)
	return err
}

// UpdateAmazon converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateAmazon(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asin" -------------
	var asin string

	err = runtime.BindStyledParameterWithLocation("simple", false, "asin", runtime.ParamLocationPath, ctx.Param("asin"), &asin)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asin: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateAmazon(ctx, asin)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/amazon", wrapper.AddAmazon)
	router.PATCH(baseURL+"/amazon/active/:asin", wrapper.UndeleteAmazon)
	router.DELETE(baseURL+"/amazon/:asin", wrapper.DeleteAmazon)
	router.GET(baseURL+"/amazon/:asin", wrapper.FindAmazonById)
	router.PATCH(baseURL+"/amazon/:asin", wrapper.PatchAmazon)
	router.PUT(baseURL+"/amazon/:asin", wrapper.UpdateAmazon)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xWT08bRxT/Kta0x63XNaiHvZmWSpYqhIQ4IVRNd5/tod6d6cwYlyIfbLdACRIIKUYk",
	"kcghQokiIQ45Bvgwm3XgW0Qzs4v/rC0CShwOvo1m3rw/v9/vPb1N5FKf0QACKZCziYRbAR/rY8HH/9BA",
	"nRinDLgkoO+xIPpWbjBADhKSk6CMGhby8Z/Afw+wDyOfGSeufilR7mOJHEQC+dMsshJTEkgoAze21Ku5",
	"crwzDljQ0WnUeHXEvf7zV41w8JCzMhhgIPUk0dsYxqNl6l69zZb+sQauVAENUItYupU0Wo8dlFQ185xT",
	"nq7DpV4qz5n8yDx9EAKX4W4StM+efRpb9YEEJapceSBcTpgkqsIY80xhsYgsVCUuBEIHNNigAsNuBTL5",
	"bC6mz0EVKZlwbLter2exfs5SXrbjv8L+rfjz/MLS/A/5bC5bkX5VVSKJrCp3S3VcLgPPDERdBy5MMj9m",
	"c9mcsqcMAswIctCMvrIQw7Ki8bNxr52okOmKzHvY3g7b78PWVdg863bOr0/3P1y86O4cIO2cY2Vc9FSF",
	"nhc3qMEUhJyj3oahKpAQ6BCYsSpx9S97LdaGaXF1+p5DCTnoO7s3A+x4ANixc03BYKLXVxfR7suweRy2",
	"ngwljfr5lbwGmnDBqEJYRcznchPI0GSVSSIjbVDCtar8YsFNl4yIXQvgbwauBC8DiU3DSui3sSvJOtib",
	"apg0tBiSsTHoJvp/9+b4Vdh8Grb2wubJsDhah4Wl4kLYOuzubUdnz8LmUdg8jS7fRP+1U0pZDjyogoRb",
	"uTDMsQ8SuEDOynDg7vN33c65dngSNv/t16MKiVRDIkfrGllJu+nROMy91Qfl8BxYnepiUBc9QRiy7p4P",
	"IyVw/bbz8WDLiCclhF/uIYNEf5OWwey4wjMGF++bk2ahMsgH0hPtd6LLoxQxv5IgHuZzG0XvTmq0k2mH",
	"TobsMfP5s+i+ab+OdrbMRE2RrvfFRzeTv9YiYbbjEaj3YzTdKe6lzNpDx9AYRS4zDz/CNWGSu+1Uh/fe",
	"YRqNTwEAAP//C9whnUQQAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

